import React, { useState, useEffect, useRef } from 'react';
import {
  View,
  KeyboardAvoidingView,
  Platform,
  ScrollView,
  Alert,
  TouchableOpacity,
} from 'react-native';
import {
  TextInput,
  Text,
  ActivityIndicator,
} from 'react-native-paper';
import { SafeAreaView } from 'react-native-safe-area-context';
import { useAuth } from '../contexts/AuthContext';
import { useNavigation } from '@react-navigation/native';
import { globalStyles, colors } from '../../../theme/theme';

const LoginScreen: React.FC = () => {
  const navigation = useNavigation();
  const { login, user, isLoading } = useAuth();
  // –ü—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –ø–æ–ª—è —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
  const [email, setEmail] = useState('oleg.palmieri@ya.ru');
  const [password, setPassword] = useState('2BjnKE63!');
  const [loading, setLoading] = useState(false);
  const [showPassword, setShowPassword] = useState(false);

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º ref –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥–≤–æ–π–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  const hasNavigated = useRef(false);

  useEffect(() => {
    if (user && !hasNavigated.current) {
      console.log('üöÄ [LoginScreen] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ø–∏—Å–∫—É –º–∞—Ç—á–µ–π');
      console.log(`üë§ [LoginScreen] –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.email}`);

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é
      hasNavigated.current = true;

      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
      setTimeout(() => {
        navigation.reset({
          index: 0,
          routes: [{ name: 'MatchList' as never }],
        });
      }, 100);
    }
  }, [user, navigation]);

  const handleLogin = async () => {
    console.log('üîê [LoginScreen] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞');

    if (!email || !password) {
      console.log('‚ö†Ô∏è [LoginScreen] –ü—É—Å—Ç—ã–µ –ø–æ–ª—è email –∏–ª–∏ –ø–∞—Ä–æ–ª—å');
      Alert.alert('–û—à–∏–±–∫–∞', '–í–≤–µ–¥–∏—Ç–µ email –∏ –ø–∞—Ä–æ–ª—å');
      return;
    }

    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –Ω–∞–∂–∞—Ç–∏—è
    if (loading) {
      console.log('‚è∏Ô∏è [LoginScreen] –£–∂–µ –∏–¥–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
      return;
    }

    console.log('üîÑ [LoginScreen] –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    setLoading(true);
    try {
      await login(email, password);
      console.log('‚úÖ [LoginScreen] –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
      // –ù–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º loading –∑–¥–µ—Å—å, —Ç–∞–∫ –∫–∞–∫ –±—É–¥–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –¥—Ä—É–≥–æ–π —ç–∫—Ä–∞–Ω
    } catch (error: any) {
      console.error('‚ùå [LoginScreen] –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);

      // –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
      let errorMessage = '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å';

      if (error?.status === 0 || error?.message?.includes('Network')) {
        errorMessage = '–ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–µ—Ç—å—é. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.';
      } else if (error?.status === 400) {
        errorMessage = '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å';
      } else if (error?.status >= 500) {
        errorMessage = '–°–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
      } else if (error?.message) {
        errorMessage = error.message;
      }

      Alert.alert('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞', errorMessage);

      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º loading —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      setLoading(false);
    }
  };

  if (isLoading) {
    return (
      <View style={globalStyles.loginLoadingContainer}>
        <ActivityIndicator size="large" color={colors.primary} />
      </View>
    );
  }

  return (
    <SafeAreaView style={globalStyles.loginContainer}>
      <KeyboardAvoidingView
        behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
        style={globalStyles.loginKeyboardView}
      >
        <ScrollView
          contentContainerStyle={globalStyles.loginScrollView}
          keyboardShouldPersistTaps="handled"
          showsVerticalScrollIndicator={false}
        >
          <View style={globalStyles.loginCard}>
            {/* Logo/Title Section */}
            <View style={globalStyles.loginHeaderSection}>
              <Text style={globalStyles.loginTitle}>–í –• –û –î</Text>
            </View>

            {/* Form Section */}
            <View style={globalStyles.loginFormSection}>
              <View style={globalStyles.loginInputContainer}>
                <Text style={globalStyles.loginLabel}>E-Mail</Text>
                <TextInput
                  value={email}
                  onChangeText={setEmail}
                  autoCapitalize="none"
                  keyboardType="email-address"
                  mode="flat"
                  style={globalStyles.loginInput}
                  placeholder="oleg.palmieri@ya.ru"
                  placeholderTextColor={colors.mutedForeground}
                  underlineColor="transparent"
                  activeUnderlineColor="transparent"
                  textColor={colors.foreground}
                  editable={!loading}
                  theme={{
                    colors: {
                      primary: colors.primary,
                      background: colors.input,
                    },
                  }}
                />
              </View>

              <View style={globalStyles.loginInputContainer}>
                <Text style={globalStyles.loginLabel}>–ü–∞—Ä–æ–ª—å</Text>
                <TextInput
                  value={password}
                  onChangeText={setPassword}
                  secureTextEntry={!showPassword}
                  mode="flat"
                  style={globalStyles.loginInput}
                  placeholder="2BjnKE63!"
                  placeholderTextColor={colors.mutedForeground}
                  underlineColor="transparent"
                  activeUnderlineColor="transparent"
                  textColor={colors.foreground}
                  editable={!loading}
                  right={
                    <TextInput.Icon
                      icon={showPassword ? 'eye-off' : 'eye'}
                      onPress={() => setShowPassword(!showPassword)}
                      color={colors.mutedForeground}
                      size={20}
                      disabled={loading}
                    />
                  }
                  theme={{
                    colors: {
                      primary: colors.primary,
                      background: colors.input,
                    },
                  }}
                />
              </View>

              {/* Login Button */}
              <TouchableOpacity
                style={[globalStyles.loginButton, loading && globalStyles.loginButtonDisabled]}
                onPress={handleLogin}
                disabled={loading}
                activeOpacity={0.8}
              >
                {loading ? (
                  <ActivityIndicator size="small" color={colors.primaryForeground} />
                ) : (
                  <Text style={globalStyles.loginButtonText}>–í–æ–π—Ç–∏</Text>
                )}
              </TouchableOpacity>
            </View>
          </View>
        </ScrollView>
      </KeyboardAvoidingView>
    </SafeAreaView>
  );
};

export default LoginScreen;
