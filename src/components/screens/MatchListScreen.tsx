import React, { useState, useEffect, useCallback, useRef } from 'react';
import {
  View,
  FlatList,
  RefreshControl,
  Alert,
  TouchableOpacity,
} from 'react-native';
import {
  ActivityIndicator,
  Text,
} from 'react-native-paper';
import { SafeAreaView } from 'react-native-safe-area-context';
import { useNavigation } from '@react-navigation/native';
import { usePocketBase } from '../contexts/PocketBaseContext';
import { useAuth } from '../contexts/AuthContext';
import { Match } from '../types';
import MatchCard from '../MatchCard';
import { globalStyles } from '../../../theme/theme';

const MatchListScreen: React.FC = () => {
  const navigation = useNavigation();
  const pb = usePocketBase();
  const { logout } = useAuth();
  const [matches, setMatches] = useState<Match[]>([]);
  const [loading, setLoading] = useState(true);
  const [refreshing, setRefreshing] = useState(false);
  const [statusFilter, setStatusFilter] = useState<'live' | 'upcoming' | 'completed' | 'cancelled' | 'all'>('live');

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º ref –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  const isMounted = useRef(true);
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º ref –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
  const loadingRef = useRef(false);
  // AbortController –¥–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø—Ä–æ—Å–æ–≤
  const abortControllerRef = useRef<AbortController | null>(null);

  useEffect(() => {
    console.log('üöÄ [MatchListScreen] –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –º–∞—Ç—á–µ–π');
    console.log(`üé´ [MatchListScreen] –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ PocketBase: isValid=${pb.authStore.isValid}, hasToken=${!!pb.authStore.token}`);

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    isMounted.current = true;

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞—Ç—á–∏ —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    const timeoutId = setTimeout(() => {
      if (isMounted.current) {
        loadMatches();
      }
    }, 100);

    // Cleanup —Ñ—É–Ω–∫—Ü–∏—è
    return () => {
      console.log('üßπ [MatchListScreen] Cleanup: –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä—É–µ—Ç—Å—è');
      isMounted.current = false;
      clearTimeout(timeoutId);

      // –û—Ç–º–µ–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
      if (abortControllerRef.current) {
        abortControllerRef.current.abort();
        abortControllerRef.current = null;
      }
    };
  }, []);

  const loadMatches = async (attempt = 1) => {
    const maxAttempts = 3;

    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    if (loadingRef.current && attempt === 1) {
      console.log('‚è∏Ô∏è [loadMatches] –£–∂–µ –∏–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –≤—Å–µ –µ—â–µ —Å–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω
    if (!isMounted.current) {
      console.log('üö´ [loadMatches] –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω, –æ—Ç–º–µ–Ω—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É');
      return;
    }

    loadingRef.current = true;

    console.log(`üîÑ [loadMatches] –ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxAttempts} –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Ç—á–µ–π`);
    console.log(`üé´ [loadMatches] PocketBase authStore.isValid: ${pb.authStore.isValid}`);
    console.log(`üë§ [loadMatches] PocketBase authStore.model: ${!!pb.authStore.model}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    if (!pb.authStore.isValid) {
      if (attempt < maxAttempts) {
        console.log(`‚ö†Ô∏è [loadMatches] PocketBase –Ω–µ –≥–æ—Ç–æ–≤, –ø–æ–≤—Ç–æ—Ä—è–µ–º —á–µ—Ä–µ–∑ ${300 * attempt}–º—Å`);
        setTimeout(() => {
          if (isMounted.current) {
            loadMatches(attempt + 1);
          }
        }, 300 * attempt);
        return;
      } else {
        console.error(`‚ùå [loadMatches] PocketBase –Ω–µ –≥–æ—Ç–æ–≤ –ø–æ—Å–ª–µ ${maxAttempts} –ø–æ–ø—ã—Ç–æ–∫`);
        if (isMounted.current) {
          Alert.alert('–û—à–∏–±–∫–∞', '–ü—Ä–æ–±–ª–µ–º–∞ —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π');
          setLoading(false);
          setRefreshing(false);
        }
        loadingRef.current = false;
        return;
      }
    }

    try {
      // –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–ø—Ä–æ—Å –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
      if (abortControllerRef.current) {
        abortControllerRef.current.abort();
      }

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π AbortController
      abortControllerRef.current = new AbortController();

      console.log('üåê [loadMatches] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API...');

      // –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –æ—Ç–º–µ–Ω—ã –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ —Ç–∞–π–º–∞—É—Ç
      const timeoutId = setTimeout(() => {
        if (abortControllerRef.current) {
          abortControllerRef.current.abort();
        }
      }, 10000); // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç

      const records = await pb.collection('matches').getFullList<Match>({
        sort: '-starts_at',
      });

      clearTimeout(timeoutId);

      if (!isMounted.current) {
        console.log('üö´ [loadMatches] –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω –ø–æ—Å–ª–µ –∑–∞–ø—Ä–æ—Å–∞');
        return;
      }

      console.log(`‚úÖ [loadMatches] –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –º–∞—Ç—á–µ–π: ${records.length}`);
      console.log(`üìä [loadMatches] –ü–µ—Ä–≤—ã–π –º–∞—Ç—á:`, records[0] ? {
        id: records[0].id,
        league: records[0].league,
        teams: `${records[0].home_team} vs ${records[0].away_team}`
      } : '–Ω–µ—Ç –º–∞—Ç—á–µ–π');

      setMatches(records);
      abortControllerRef.current = null;
    } catch (error: any) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–∞ –ª–∏ —ç—Ç–æ –æ—Ç–º–µ–Ω–∞ –∑–∞–ø—Ä–æ—Å–∞
      if (error?.name === 'AbortError' || !isMounted.current) {
        console.log('üõë [loadMatches] –ó–∞–ø—Ä–æ—Å –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω');
        return;
      }

      console.error(`‚ùå [loadMatches] –û—à–∏–±–∫–∞ –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ ${attempt}:`, error);
      console.log(`üîç [loadMatches] –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:`, {
        message: error?.message,
        status: error?.status,
        data: error?.data,
        url: error?.url,
        isAbort: error?.isAbort
      });

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ retry
      const isNetworkError = error?.status === 0 || error?.message?.includes('Network') || error?.message?.includes('timeout');
      const isServerError = error?.status >= 500;
      const shouldRetry = isNetworkError || isServerError;

      if (attempt < maxAttempts && shouldRetry && isMounted.current) {
        const retryDelay = isNetworkError ? 2000 * attempt : 1000 * attempt;
        console.log(`üîÑ [loadMatches] ${isNetworkError ? '–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞' : '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'} - –ø–æ–≤—Ç–æ—Ä—è–µ–º —á–µ—Ä–µ–∑ ${retryDelay}–º—Å...`);
        setTimeout(() => {
          if (isMounted.current) {
            loadMatches(attempt + 1);
          }
        }, retryDelay);
        return;
      } else if (attempt >= maxAttempts) {
        console.error(`‚ùå [loadMatches] –û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –ø–æ—Å–ª–µ ${maxAttempts} –ø–æ–ø—ã—Ç–æ–∫`);

        if (!isMounted.current) return;

        // –ë–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        let errorMessage = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
        if (isNetworkError) {
          errorMessage = '–ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–µ—Ç—å—é. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.';
        } else if (error?.status === 401) {
          errorMessage = '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ.';
        } else if (error?.status >= 500) {
          errorMessage = '–°–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
        } else if (error?.message) {
          errorMessage = error.message;
        }

        Alert.alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏', errorMessage);
      }
    } finally {
      if (isMounted.current && (attempt >= maxAttempts || pb.authStore.isValid)) {
        console.log(`üèÅ [loadMatches] –ó–∞–≤–µ—Ä—à–∞–µ–º loading —Å–æ—Å—Ç–æ—è–Ω–∏–µ`);
        setLoading(false);
        setRefreshing(false);
        loadingRef.current = false;
      }
    }
  };

  const handleRefresh = useCallback(() => {
    console.log('üîÑ [MatchListScreen] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞');
    setRefreshing(true);
    loadMatches();
  }, []);

  const handleLogout = () => {
    Alert.alert(
      '–í—ã—Ö–æ–¥',
      '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?',
      [
        { text: '–û—Ç–º–µ–Ω–∞', style: 'cancel' },
        {
          text: '–í—ã–π—Ç–∏',
          style: 'destructive',
          onPress: async () => {
            await logout();
            navigation.reset({
              index: 0,
              routes: [{ name: 'Login' as never }],
            });
          },
        },
      ]
    );
  };

  if (loading) {
    return (
      <View style={globalStyles.loadingContainer}>
        <ActivityIndicator size="large" color="#ffffff" />
      </View>
    );
  }

  const filtered = matches.filter((m) => (statusFilter === 'all' ? true : m.status === statusFilter));

  return (
    <SafeAreaView style={globalStyles.container}>
      {/* Custom Header with logout icon */}
      <View style={globalStyles.header}>
        <View style={globalStyles.headerIcon} />
        <TouchableOpacity
          style={globalStyles.headerIcon}
          onPress={handleLogout}
          activeOpacity={0.7}
        >
          <Text style={globalStyles.logoutIcon}>‚éã</Text>
        </TouchableOpacity>
      </View>

      {/* –§–∏–ª—å—Ç—Ä—ã —Å—Ç–∞—Ç—É—Å–∞ */}
      <View style={{ flexDirection: 'row', paddingHorizontal: 12, paddingVertical: 8, gap: 8 }}>
        {(['live', 'upcoming', 'completed', 'cancelled', 'all'] as const).map((st) => (
          <TouchableOpacity
            key={st}
            onPress={() => setStatusFilter(st)}
            activeOpacity={0.7}
            style={{
              paddingHorizontal: 10,
              paddingVertical: 6,
              borderRadius: 6,
              borderWidth: 1,
              borderColor: statusFilter === st ? '#FFFFFF' : '#333333',
              backgroundColor: statusFilter === st ? '#111111' : '#0b0b0b',
            }}
          >
            <Text style={{ color: '#fff', fontSize: 12 }}>
              {st === 'all' ? '–í—Å–µ' : st === 'live' ? 'LIVE' : st === 'upcoming' ? '–û–∂–∏–¥–∞–µ—Ç—Å—è' : st === 'completed' ? '–ó–∞–≤–µ—Ä—à–µ–Ω' : '–û—Ç–º–µ–Ω–µ–Ω'}
            </Text>
          </TouchableOpacity>
        ))}
      </View>

      {/* Match List */}
      <FlatList
        data={filtered}
        keyExtractor={(item) => item.id}
        renderItem={({ item, index }) => (
          <MatchCard
            match={item}
            onPress={() => {}}
            index={index}
          />
        )}
        refreshControl={
          <RefreshControl
            refreshing={refreshing}
            onRefresh={handleRefresh}
            colors={['#ffffff']}
            tintColor={'#ffffff'}
          />
        }
        contentContainerStyle={globalStyles.listContent}
        ListEmptyComponent={
          <View style={globalStyles.emptyContainer}>
            <Text style={globalStyles.emptyIcon}>‚ñ°</Text>
            <Text style={globalStyles.emptyTitle}>–ù–µ—Ç –∫–æ–º–∞–Ω–¥</Text>
            <Text style={globalStyles.emptyText}>
              –ö–æ–º–∞–Ω–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
            </Text>
          </View>
        }
      />

    </SafeAreaView>
  );
};

export default MatchListScreen;
