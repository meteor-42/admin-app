import React, { useState, useEffect, useCallback, useRef } from 'react';
import {
  View,
  FlatList,
  RefreshControl,
  Alert,
  TouchableOpacity,
  KeyboardAvoidingView,
  Platform,
} from 'react-native';
import {
  ActivityIndicator,
  Text,
  Modal,
  Portal,
  Button,
  TextInput,
  Menu,
} from 'react-native-paper';
import { SafeAreaView } from 'react-native-safe-area-context';
import { useNavigation } from '@react-navigation/native';
import { usePocketBase } from '../contexts/PocketBaseContext';
import { useAuth } from '../contexts/AuthContext';
import { Match, MatchStatus } from '../types';
import MatchCard from '../MatchCard';
import { globalStyles, colors, spacing, typography, borderRadius } from '../../../theme/theme';
import { ApiError } from '../types';
import Icon from 'react-native-vector-icons/MaterialIcons';

const MatchListScreen: React.FC = () => {
  const navigation = useNavigation();
  const pb = usePocketBase();
  const { logout } = useAuth();
  const [matches, setMatches] = useState<Match[]>([]);
  const [loading, setLoading] = useState(true);
  const [refreshing, setRefreshing] = useState(false);
  const [statusFilter, setStatusFilter] = useState<'live' | 'upcoming' | 'completed' | 'cancelled'>('upcoming');

  // Modal state - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
  const [isEditModalVisible, setIsEditModalVisible] = useState(false);
  const [editing, setEditing] = useState(false);
  const [selectedMatch, setSelectedMatch] = useState<Match | null>(null);
  const [editStatus, setEditStatus] = useState<MatchStatus>('completed');
  const [homeScore, setHomeScore] = useState<string>('0');
  const [awayScore, setAwayScore] = useState<string>('0');
  const [statusMenuVisible, setStatusMenuVisible] = useState(false);

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º ref –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  const isMounted = useRef(true);
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º ref –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
  const loadingRef = useRef(false);

  useEffect(() => {
    if (__DEV__) {
      console.warn('üöÄ [MatchListScreen] –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –º–∞—Ç—á–µ–π');
      console.warn(`üé´ [MatchListScreen] –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ PocketBase: isValid=${pb.authStore.isValid}, hasToken=${!!pb.authStore.token}`);
    }

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    isMounted.current = true;

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞—Ç—á–∏ —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    const timeoutId = setTimeout(() => {
      if (isMounted.current) {
        loadMatches();
      }
    }, 100);

    // Cleanup —Ñ—É–Ω–∫—Ü–∏—è
    return () => {
      if (__DEV__) {
        console.warn('üßπ [MatchListScreen] Cleanup: –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä—É–µ—Ç—Å—è');
      }
      isMounted.current = false;
      clearTimeout(timeoutId);
    };
  }, []);

  // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ñ–∏–ª—å—Ç—Ä–∞
  useEffect(() => {
    if (!loadingRef.current && isMounted.current) {
      setLoading(true);
      loadMatches();
    }
  }, [statusFilter]);

  const loadMatches = useCallback(async (attempt = 1) => {
    const maxAttempts = 3;

    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    if (loadingRef.current && attempt === 1) {
      if (__DEV__) console.warn('‚è∏Ô∏è [loadMatches] –£–∂–µ –∏–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –≤—Å–µ –µ—â–µ —Å–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω
    if (!isMounted.current) {
      if (__DEV__) console.warn('üö´ [loadMatches] –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω, –æ—Ç–º–µ–Ω—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É');
      return;
    }

    loadingRef.current = true;

    if (__DEV__) {
      console.warn(`üîÑ [loadMatches] –ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxAttempts} –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Ç—á–µ–π`);
      console.warn(`üé´ [loadMatches] PocketBase authStore.isValid: ${pb.authStore.isValid}`);
      console.warn(`üë§ [loadMatches] PocketBase authStore.model: ${!!pb.authStore.model}`);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    if (!pb.authStore.isValid) {
      if (attempt < maxAttempts) {
        if (__DEV__) console.warn(`‚ö†Ô∏è [loadMatches] PocketBase –Ω–µ –≥–æ—Ç–æ–≤, –ø–æ–≤—Ç–æ—Ä—è–µ–º —á–µ—Ä–µ–∑ ${300 * attempt}–º—Å`);
        setTimeout(() => {
          if (isMounted.current) {
            loadMatches(attempt + 1);
          }
        }, 300 * attempt);
        return;
      } else {
        console.error(`‚ùå [loadMatches] PocketBase –Ω–µ –≥–æ—Ç–æ–≤ –ø–æ—Å–ª–µ ${maxAttempts} –ø–æ–ø—ã—Ç–æ–∫`);
        if (isMounted.current) {
          Alert.alert('–û—à–∏–±–∫–∞', '–ü—Ä–æ–±–ª–µ–º–∞ —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π');
          setLoading(false);
          setRefreshing(false);
        }
        loadingRef.current = false;
        return;
      }
    }

    try {
      if (__DEV__) console.warn('üåê [loadMatches] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API...');

      // –°–µ—Ä–≤–µ—Ä–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
      const filter = `status = "${statusFilter}"`;
      const records = await pb.collection('matches').getFullList<Match>({
        sort: '-starts_at',
        filter,
      });

      if (!isMounted.current) {
        if (__DEV__) console.warn('üö´ [loadMatches] –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω –ø–æ—Å–ª–µ –∑–∞–ø—Ä–æ—Å–∞');
        return;
      }

      if (__DEV__) {
        console.warn(`‚úÖ [loadMatches] –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –º–∞—Ç—á–µ–π: ${records.length}`);
        console.warn(`üìä [loadMatches] –ü–µ—Ä–≤—ã–π –º–∞—Ç—á:`, records[0] ? {
          id: records[0].id,
          league: records[0].league,
          teams: `${records[0].home_team} vs ${records[0].away_team}`
        } : '–Ω–µ—Ç –º–∞—Ç—á–µ–π');
      }

      setMatches(records);
    } catch (error: unknown) {
      if (!isMounted.current) return;

      console.error(`‚ùå [loadMatches] –û—à–∏–±–∫–∞ –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ ${attempt}:`, error);
      if (__DEV__) {
        const apiError = error as ApiError;
        console.warn(`üîç [loadMatches] –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:`, {
          message: apiError.message,
          status: apiError.status,
          data: apiError.data,
          url: apiError.url,
        });
      }

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ retry
      const apiError = error as ApiError;
      const isNetworkError = apiError.status === 0 || apiError.message?.includes('Network') || apiError.message?.includes('timeout');
      const isServerError = apiError.status !== undefined && apiError.status >= 500;

      const shouldRetry = isNetworkError || isServerError;

      if (attempt < maxAttempts && shouldRetry && isMounted.current) {
        const retryDelay = isNetworkError ? 2000 * attempt : 1000 * attempt;
        if (__DEV__) console.warn(`üîÑ [loadMatches] ${isNetworkError ? '–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞' : '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'} - –ø–æ–≤—Ç–æ—Ä—è–µ–º —á–µ—Ä–µ–∑ ${retryDelay}–º—Å...`);
        setTimeout(() => {
          if (isMounted.current) {
            loadMatches(attempt + 1);
          }
        }, retryDelay);
        return;
      } else if (attempt >= maxAttempts) {
        console.error(`‚ùå [loadMatches] –û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –ø–æ—Å–ª–µ ${maxAttempts} –ø–æ–ø—ã—Ç–æ–∫`);

        if (!isMounted.current) return;

        // –ë–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        let errorMessage = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
        if (isNetworkError) {
          errorMessage = '–ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–µ—Ç—å—é. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.';
        } else if (apiError.status === 401) {
          errorMessage = '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ.';
        } else if (apiError.status && apiError.status >= 500) {
          errorMessage = '–°–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
        } else if (apiError.message) {
          errorMessage = apiError.message;
        }

        Alert.alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏', errorMessage);
      }
    } finally {
      if (isMounted.current && (attempt >= maxAttempts || pb.authStore.isValid)) {
        if (__DEV__) console.warn(`üèÅ [loadMatches] –ó–∞–≤–µ—Ä—à–∞–µ–º loading —Å–æ—Å—Ç–æ—è–Ω–∏–µ`);
        setLoading(false);
        setRefreshing(false);
        loadingRef.current = false;
      }
    }
  }, [pb, statusFilter]);

  const handleRefresh = useCallback(() => {
    if (__DEV__) console.warn('üîÑ [MatchListScreen] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞');
    setRefreshing(true);
    loadMatches();
  }, [loadMatches]);

  const handleLogout = () => {
    Alert.alert(
      '–í—ã—Ö–æ–¥',
      '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?',
      [
        { text: '–û—Ç–º–µ–Ω–∞', style: 'cancel' },
        {
          text: '–í—ã–π—Ç–∏',
          style: 'destructive',
          onPress: async () => {
            await logout();
            navigation.reset({
              index: 0,
              routes: [{ name: 'Login' as never }],
            });
          },
        },
      ]
    );
  };

  // Handlers for editing
  const openEdit = (match: Match) => {
    setSelectedMatch(match);
    setEditStatus(match.status);
    setHomeScore(match.home_score !== undefined ? String(match.home_score) : '0');
    setAwayScore(match.away_score !== undefined ? String(match.away_score) : '0');
    setIsEditModalVisible(true);
  };

  const closeEdit = () => {
    if (editing) return;
    setIsEditModalVisible(false);
    setSelectedMatch(null);
    setStatusMenuVisible(false);
  };

  const onDismissRequest = () => {
    if (!editing) closeEdit();
  };

  const saveEdit = async () => {
    if (!selectedMatch) return;
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è —á–∏—Å–µ–ª
    const hs = Number(homeScore);
    const as = Number(awayScore);
    if (editStatus === 'completed') {
      if (!Number.isFinite(hs) || hs < 0 || !Number.isFinite(as) || as < 0) {
        Alert.alert('–û—à–∏–±–∫–∞', '–°—á–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏');
        return;
      }
    }

    try {
      setEditing(true);
      const payload: Partial<Match> = { status: editStatus } as Partial<Match>;
      if (editStatus === 'completed') {
        Object.assign(payload, { home_score: hs, away_score: as });
      }

      await pb.collection('matches').update<Match>(selectedMatch.id, payload);

      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ
      setMatches((prev) => prev.map((m) => (m.id === selectedMatch.id ? { ...m, ...payload } as Match : m)));
      closeEdit();
    } catch (error: unknown) {
      const apiError = error as ApiError;
      Alert.alert('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è', apiError.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è');
    } finally {
      setEditing(false);
    }
  };

  if (loading) {
    return (
      <View style={globalStyles.loadingContainer}>
        <ActivityIndicator size="large" color="#ffffff" />
      </View>
    );
  }

  const filtered = matches.filter((m) => m.status === statusFilter);

  return (
    <SafeAreaView style={globalStyles.container}>
      {/* Header with logout on the right */}
      <View style={[globalStyles.header, { justifyContent: 'flex-end' }]}>
        <TouchableOpacity
          onPress={handleLogout}
          activeOpacity={0.7}
        >
          <Text style={{
            fontSize: 14,
            color: colors.zinc[300],
            backgroundColor: colors.zinc[900],
            paddingHorizontal: 12,
            paddingVertical: 6,
          }}>
            –í—ã—Ö–æ–¥
          </Text>
        </TouchableOpacity>
      </View>

      {/* –§–∏–ª—å—Ç—Ä—ã —Å—Ç–∞—Ç—É—Å–∞ */}
      <View style={{ flexDirection: 'row', paddingHorizontal: 12, paddingVertical: 8, gap: 8 }}>
        {(['upcoming', 'live', 'completed', 'cancelled'] as const).map((st) => (
          <TouchableOpacity
            key={st}
            onPress={() => setStatusFilter(st)}
            activeOpacity={0.7}
            style={{
              paddingHorizontal: 12,
              paddingVertical: 6,
              borderWidth: 1,
              borderColor: statusFilter === st ? colors.primary : colors.border,
              backgroundColor: statusFilter === st ? colors.primary : colors.input,
            }}
          >
            <Text style={{ 
              color: statusFilter === st ? colors.primaryForeground : colors.foreground, 
              fontSize: 14 
            }}>
              {st === 'live' ? 'Live' : st === 'upcoming' ? '–û–∂–∏–¥–∞–µ—Ç—Å—è' : st === 'completed' ? '–ó–∞–≤–µ—Ä—à–µ–Ω' : '–û—Ç–º–µ–Ω–µ–Ω'}
            </Text>
          </TouchableOpacity>
        ))}
      </View>

      {/* Match List */}
      <FlatList
        data={filtered}
        keyExtractor={(item) => item.id}
        renderItem={({ item, index }) => (
          <MatchCard
            match={item}
            onPress={() => openEdit(item)}
            index={index}
          />
        )}
        refreshControl={
          <RefreshControl
            refreshing={refreshing}
            onRefresh={handleRefresh}
            colors={[colors.primary]}
            tintColor={colors.primary}
          />
        }
        contentContainerStyle={[globalStyles.listContent, filtered.length === 0 ? { flex: 1, justifyContent: 'center' } : undefined]}
        ListEmptyComponent={
          <View style={{ alignItems: 'center', paddingHorizontal: 24 }}>
            <Text style={{ fontSize: 42, color: colors.zinc[600], marginBottom: 8 }}>‚öΩ</Text>
            <Text style={{ fontSize: 14, color: colors.mutedForeground }}>–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</Text>
          </View>
        }
      />

      {/* Edit Modal */}
      <Portal>
        <Modal
          visible={isEditModalVisible}
          onDismiss={onDismissRequest}
          dismissable={!editing}
          dismissableBackButton={!editing}
          contentContainerStyle={{
            backgroundColor: colors.card,
            borderColor: colors.border,
            borderWidth: 1,
            padding: spacing.md,
            marginHorizontal: spacing.md,
            marginVertical: spacing.xl,
            borderRadius: borderRadius.lg,
          }}
        >
          {/* Handle area for swipe affordance */}
          <View style={{ alignItems: 'center', marginBottom: spacing.sm }}>
            <View style={{ 
              height: 4, 
              width: 44, 
              borderRadius: 2, 
              backgroundColor: colors.zinc[700] 
            }} />
          </View>
          
          <KeyboardAvoidingView 
            behavior={Platform.select({ ios: 'padding', android: undefined })}
          >
            <Text style={{ 
              color: colors.foreground, 
              fontSize: typography.fontSize.lg, 
              fontWeight: typography.fontWeight.semibold, 
              marginBottom: spacing.sm 
            }}>
              –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Ç—á–∞
            </Text>
            
            {selectedMatch && (
              <View>
                <Text style={{ 
                  color: colors.mutedForeground, 
                  marginBottom: spacing.md,
                  fontSize: typography.fontSize.sm
                }}>
                  {selectedMatch.home_team} <Text style={{ color: colors.zinc[500] }}>vs</Text> {selectedMatch.away_team}
                </Text>

                {/* –°—Ç–∞—Ç—É—Å (dropdown) */}
                <Text style={{ 
                  color: colors.mutedForeground, 
                  marginBottom: spacing.xs, 
                  fontSize: typography.fontSize.xs, 
                  textTransform: 'uppercase', 
                  letterSpacing: 0.6 
                }}>
                  –°—Ç–∞—Ç—É—Å
                </Text>
                
                <View style={{ alignSelf: 'stretch', marginBottom: spacing.md }}>
                  <Menu
                    visible={statusMenuVisible}
                    onDismiss={() => setStatusMenuVisible(false)}
                    anchor={
                      <TouchableOpacity
                        onPress={() => setStatusMenuVisible(true)}
                        activeOpacity={0.7}
                        disabled={editing}
                        style={{
                          borderWidth: 1,
                          borderColor: colors.border,
                          backgroundColor: colors.input,
                          paddingHorizontal: spacing.md,
                          paddingVertical: spacing.sm,
                          borderRadius: borderRadius.md,
                          flexDirection: 'row',
                          justifyContent: 'space-between',
                          alignItems: 'center',
                          opacity: editing ? 0.6 : 1,
                        }}
                      >
                        <Text style={{ 
                          color: colors.foreground, 
                          fontSize: typography.fontSize.sm 
                        }}>
                          {editStatus === 'live' ? 'Live' : 
                           editStatus === 'upcoming' ? '–û–∂–∏–¥–∞–µ—Ç—Å—è' : 
                           editStatus === 'completed' ? '–ó–∞–≤–µ—Ä—à–µ–Ω' : '–û—Ç–º–µ–Ω–µ–Ω'}
                        </Text>
                        <Icon 
                          name={statusMenuVisible ? 'arrow-drop-up' : 'arrow-drop-down'} 
                          size={20} 
                          color={colors.mutedForeground} 
                        />
                      </TouchableOpacity>
                    }
                    contentStyle={{ 
                      backgroundColor: colors.card,
                      borderWidth: 1,
                      borderColor: colors.border,
                      borderRadius: borderRadius.md,
                    }}
                  >
                    {(['upcoming', 'live', 'completed', 'cancelled'] as const).map((st) => (
                      <Menu.Item
                        key={st}
                        onPress={() => { 
                          setEditStatus(st); 
                          setStatusMenuVisible(false); 
                          // –ü—Ä–∏ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞ —Å completed —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç
                          if (st !== 'completed') {
                            setHomeScore('0');
                            setAwayScore('0');
                          }
                        }}
                        title={st === 'live' ? 'Live' : 
                               st === 'upcoming' ? '–û–∂–∏–¥–∞–µ—Ç—Å—è' : 
                               st === 'completed' ? '–ó–∞–≤–µ—Ä—à–µ–Ω' : '–û—Ç–º–µ–Ω–µ–Ω'}
                        titleStyle={{ 
                          color: colors.foreground,
                          fontSize: typography.fontSize.sm
                        }}
                        style={{
                          backgroundColor: editStatus === st ? colors.zinc[800] : 'transparent',
                        }}
                      />)
                    )}
                  </Menu>
                </View>

                {/* –°—á–µ—Ç: —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ completed */}
                {editStatus === 'completed' && (
                  <View>
                    <Text style={{ 
                      color: colors.mutedForeground, 
                      marginBottom: spacing.xs, 
                      fontSize: typography.fontSize.xs, 
                      textTransform: 'uppercase', 
                      letterSpacing: 0.6 
                    }}>
                      –°—á–µ—Ç
                    </Text>
                    
                    <View style={{ 
                      flexDirection: 'row', 
                      gap: spacing.md,
                      marginBottom: spacing.md 
                    }}>
                      {/* –î–æ–º–∞—à–Ω–∏–µ */}
                      <View style={{ flex: 1 }}>
                        <Text style={{ 
                          color: colors.mutedForeground, 
                          marginBottom: spacing.xs, 
                          fontSize: typography.fontSize.xs 
                        }}>
                          –î–æ–º–∞—à–Ω–∏–µ
                        </Text>
                        <View style={{ 
                          flexDirection: 'row', 
                          alignItems: 'center',
                          borderWidth: 1,
                          borderColor: colors.border,
                          borderRadius: borderRadius.md,
                          backgroundColor: colors.input,
                          overflow: 'hidden',
                        }}>
                          <TouchableOpacity
                            onPress={() => {
                              const newScore = Math.max(0, parseInt(homeScore || '0') - 1);
                              setHomeScore(String(newScore));
                            }}
                            style={{
                              padding: spacing.sm,
                              backgroundColor: colors.zinc[800],
                            }}
                            activeOpacity={0.7}
                            disabled={editing}
                          >
                            <Icon name="remove" size={20} color={colors.foreground} />
                          </TouchableOpacity>
                          
                          <TextInput
                            mode="flat"
                            value={homeScore}
                            onChangeText={(text) => {
                              // –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
                              if (/^\d*$/.test(text)) {
                                setHomeScore(text);
                              }
                            }}
                            keyboardType="number-pad"
                            style={{ 
                              flex: 1, 
                              backgroundColor: 'transparent',
                              textAlign: 'center',
                              height: 44,
                            }}
                            underlineColor="transparent"
                            textColor={colors.foreground}
                            theme={{ 
                              colors: { 
                                primary: colors.primary, 
                                onSurface: colors.foreground,
                                onSurfaceVariant: colors.mutedForeground 
                              } 
                            }}
                            editable={!editing}
                          />
                          
                          <TouchableOpacity
                            onPress={() => {
                              const newScore = parseInt(homeScore || '0') + 1;
                              setHomeScore(String(newScore));
                            }}
                            style={{
                              padding: spacing.sm,
                              backgroundColor: colors.zinc[800],
                            }}
                            activeOpacity={0.7}
                            disabled={editing}
                          >
                            <Icon name="add" size={20} color={colors.foreground} />
                          </TouchableOpacity>
                        </View>
                      </View>

                      {/* –ì–æ—Å—Ç–∏ */}
                      <View style={{ flex: 1 }}>
                        <Text style={{ 
                          color: colors.mutedForeground, 
                          marginBottom: spacing.xs, 
                          fontSize: typography.fontSize.xs 
                        }}>
                          –ì–æ—Å—Ç–∏
                        </Text>
                        <View style={{ 
                          flexDirection: 'row', 
                          alignItems: 'center',
                          borderWidth: 1,
                          borderColor: colors.border,
                          borderRadius: borderRadius.md,
                          backgroundColor: colors.input,
                          overflow: 'hidden',
                        }}>
                          <TouchableOpacity
                            onPress={() => {
                              const newScore = Math.max(0, parseInt(awayScore || '0') - 1);
                              setAwayScore(String(newScore));
                            }}
                            style={{
                              padding: spacing.sm,
                              backgroundColor: colors.zinc[800],
                            }}
                            activeOpacity={0.7}
                            disabled={editing}
                          >
                            <Icon name="remove" size={20} color={colors.foreground} />
                          </TouchableOpacity>
                          
                          <TextInput
                            mode="flat"
                            value={awayScore}
                            onChangeText={(text) => {
                              if (/^\d*$/.test(text)) {
                                setAwayScore(text);
                              }
                            }}
                            keyboardType="number-pad"
                            style={{ 
                              flex: 1, 
                              backgroundColor: 'transparent',
                              textAlign: 'center',
                              height: 44,
                            }}
                            underlineColor="transparent"
                            textColor={colors.foreground}
                            theme={{ 
                              colors: { 
                                primary: colors.primary, 
                                onSurface: colors.foreground,
                                onSurfaceVariant: colors.mutedForeground 
                              } 
                            }}
                            editable={!editing}
                          />
                          
                          <TouchableOpacity
                            onPress={() => {
                              const newScore = parseInt(awayScore || '0') + 1;
                              setAwayScore(String(newScore));
                            }}
                            style={{
                              padding: spacing.sm,
                              backgroundColor: colors.zinc[800],
                            }}
                            activeOpacity={0.7}
                            disabled={editing}
                          >
                            <Icon name="add" size={20} color={colors.foreground} />
                          </TouchableOpacity>
                        </View>
                      </View>
                    </View>
                  </View>
                )}

                <View style={{ 
                  flexDirection: 'row', 
                  justifyContent: 'flex-end', 
                  marginTop: spacing.md, 
                  gap: spacing.sm 
                }}>
                  <Button 
                    onPress={closeEdit} 
                    disabled={editing} 
                    textColor={colors.mutedForeground}
                    style={{ borderRadius: borderRadius.md }}
                  >
                    –û—Ç–º–µ–Ω–∞
                  </Button>
                  <Button 
                    mode="contained" 
                    onPress={saveEdit} 
                    loading={editing} 
                    disabled={editing} 
                    style={{ 
                      backgroundColor: colors.primary,
                      borderRadius: borderRadius.md,
                    }}
                    labelStyle={{ color: colors.primaryForeground }}
                  >
                    –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                  </Button>
                </View>
              </View>
            )}
          </KeyboardAvoidingView>
        </Modal>
      </Portal>
    </SafeAreaView>
  );
};

export default MatchListScreen;
