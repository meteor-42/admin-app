import React, { useState, useEffect, useCallback } from 'react';
import {
  View,
  FlatList,
  RefreshControl,
  Alert,
  TouchableOpacity,
} from 'react-native';
import {
  ActivityIndicator,
  Text,
} from 'react-native-paper';
import { SafeAreaView } from 'react-native-safe-area-context';
import { useNavigation } from '@react-navigation/native';
import { usePocketBase } from '../contexts/PocketBaseContext';
import { useAuth } from '../contexts/AuthContext';
import { Match } from '../types';
import MatchCard from '../MatchCard';
import { globalStyles } from '../../../theme/theme';

const MatchListScreen: React.FC = () => {
  const navigation = useNavigation();
  const pb = usePocketBase();
  const { logout } = useAuth();
  const [matches, setMatches] = useState<Match[]>([]);
  const [loading, setLoading] = useState(true);
  const [refreshing, setRefreshing] = useState(false);

  useEffect(() => {
    console.log('üöÄ [MatchListScreen] –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –º–∞—Ç—á–µ–π');
    console.log(`üé´ [MatchListScreen] –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ PocketBase: isValid=${pb.authStore.isValid}, hasToken=${!!pb.authStore.token}`);
    loadMatches();
  }, []);

  const loadMatches = async (attempt = 1) => {
    const maxAttempts = 3;

    console.log(`üîÑ [loadMatches] –ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxAttempts} –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Ç—á–µ–π`);
    console.log(`üé´ [loadMatches] PocketBase authStore.isValid: ${pb.authStore.isValid}`);
    console.log(`üîë [loadMatches] PocketBase authStore.token: ${!!pb.authStore.token}`);
    console.log(`üë§ [loadMatches] PocketBase authStore.model: ${!!pb.authStore.model}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    if (!pb.authStore.isValid) {
      if (attempt < maxAttempts) {
        console.log(`‚ö†Ô∏è [loadMatches] PocketBase –Ω–µ –≥–æ—Ç–æ–≤, –ø–æ–≤—Ç–æ—Ä—è–µ–º —á–µ—Ä–µ–∑ ${200 * attempt}–º—Å`);
        setTimeout(() => loadMatches(attempt + 1), 200 * attempt);
        return;
      } else {
        console.error(`‚ùå [loadMatches] PocketBase –Ω–µ –≥–æ—Ç–æ–≤ –ø–æ—Å–ª–µ ${maxAttempts} –ø–æ–ø—ã—Ç–æ–∫`);
        Alert.alert('–û—à–∏–±–∫–∞', '–ü—Ä–æ–±–ª–µ–º–∞ —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π');
        setLoading(false);
        setRefreshing(false);
        return;
      }
    }

    try {
      console.log('üåê [loadMatches] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API...');
      const records = await pb.collection('matches').getFullList<Match>({
        sort: '-starts_at',
      });
      console.log(`‚úÖ [loadMatches] –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –º–∞—Ç—á–µ–π: ${records.length}`);
      console.log(`üìä [loadMatches] –ü–µ—Ä–≤—ã–π –º–∞—Ç—á:`, records[0] ? {
        id: records[0].id,
        league: records[0].league,
        teams: `${records[0].home_team} vs ${records[0].away_team}`
      } : '–Ω–µ—Ç –º–∞—Ç—á–µ–π');

      setMatches(records);
    } catch (error: any) {
      console.error(`‚ùå [loadMatches] –û—à–∏–±–∫–∞ –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ ${attempt}:`, error);
      console.log(`üîç [loadMatches] –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:`, {
        message: error?.message,
        status: error?.status,
        data: error?.data,
        url: error?.url,
        isAbort: error?.isAbort
      });

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ retry
      const isNetworkError = error?.status === 0 || error?.message?.includes('Network') || error?.message?.includes('timeout');
      const isServerError = error?.status >= 500;
      const shouldRetry = isNetworkError || isServerError;

      if (attempt < maxAttempts && shouldRetry) {
        const retryDelay = isNetworkError ? 2000 * attempt : 1000 * attempt; // –ë–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫
        console.log(`üîÑ [loadMatches] ${isNetworkError ? '–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞' : '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'} - –ø–æ–≤—Ç–æ—Ä—è–µ–º —á–µ—Ä–µ–∑ ${retryDelay}–º—Å...`);
        setTimeout(() => loadMatches(attempt + 1), retryDelay);
        return;
      } else if (attempt < maxAttempts) {
        console.log(`‚ö†Ô∏è [loadMatches] –û—à–∏–±–∫–∞ ${error?.status} –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –ø–æ–≤—Ç–æ—Ä–∞, –Ω–æ –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑`);
        setTimeout(() => loadMatches(attempt + 1), 500);
        return;
      } else {
        console.error(`‚ùå [loadMatches] –û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –ø–æ—Å–ª–µ ${maxAttempts} –ø–æ–ø—ã—Ç–æ–∫`);

        // –ë–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        let errorMessage = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
        if (isNetworkError) {
          errorMessage = '–ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–µ—Ç—å—é. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.';
        } else if (error?.status === 401) {
          errorMessage = '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ.';
        } else if (error?.status >= 500) {
          errorMessage = '–°–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
        } else if (error?.message) {
          errorMessage = error.message;
        }

        Alert.alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏', errorMessage);
      }
    } finally {
      if (attempt >= maxAttempts || pb.authStore.isValid) {
        console.log(`üèÅ [loadMatches] –ó–∞–≤–µ—Ä—à–∞–µ–º loading —Å–æ—Å—Ç–æ—è–Ω–∏–µ`);
        setLoading(false);
        setRefreshing(false);
      }
    }
  };

  const handleRefresh = useCallback(() => {
    console.log('üîÑ [MatchListScreen] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞');
    setRefreshing(true);
    loadMatches();
  }, []);

  const handleLogout = () => {
    Alert.alert(
      '–í—ã—Ö–æ–¥',
      '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?',
      [
        { text: '–û—Ç–º–µ–Ω–∞', style: 'cancel' },
        {
          text: '–í—ã–π—Ç–∏',
          style: 'destructive',
          onPress: async () => {
            await logout();
            navigation.reset({
              index: 0,
              routes: [{ name: 'Login' as never }],
            });
          },
        },
      ]
    );
  };

  if (loading) {
    return (
      <View style={globalStyles.loadingContainer}>
        <ActivityIndicator size="large" color="#ffffff" />
      </View>
    );
  }

  return (
    <SafeAreaView style={globalStyles.container}>
      {/* Custom Header with logout icon */}
      <View style={globalStyles.header}>
        <View style={globalStyles.headerIcon} />
        <TouchableOpacity
          style={globalStyles.headerIcon}
          onPress={handleLogout}
          activeOpacity={0.7}
        >
          <Text style={globalStyles.logoutIcon}>‚éã</Text>
        </TouchableOpacity>
      </View>


      {/* Match List */}
      <FlatList
        data={matches}
        keyExtractor={(item) => item.id}
        renderItem={({ item }) => (
          <MatchCard
            match={item}
            onPress={() => {}} // –£–±—Ä–∞–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
          />
        )}
        refreshControl={
          <RefreshControl
            refreshing={refreshing}
            onRefresh={handleRefresh}
            colors={['#ffffff']}
            tintColor={'#ffffff'}
          />
        }
        contentContainerStyle={globalStyles.listContent}
        ListEmptyComponent={
          <View style={globalStyles.emptyContainer}>
            <Text style={globalStyles.emptyIcon}>‚ñ°</Text>
            <Text style={globalStyles.emptyTitle}>–ù–µ—Ç –∫–æ–º–∞–Ω–¥</Text>
            <Text style={globalStyles.emptyText}>
              –ö–æ–º–∞–Ω–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
            </Text>
          </View>
        }
      />

    </SafeAreaView>
  );
};

export default MatchListScreen;
