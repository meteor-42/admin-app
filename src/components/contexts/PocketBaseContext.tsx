import React, { createContext, useContext, useEffect } from 'react';
import PocketBase from 'pocketbase';

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ URL –¥–ª—è PocketBase
// URL —Å–µ—Ä–≤–µ—Ä–∞ —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
const PB_URL = 'http://xn--d1aigb4b.xn--p1ai:8090';

console.log('üèóÔ∏è [PocketBase] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PocketBase —Å URL:', PB_URL);
const pb = new PocketBase(PB_URL);

// –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∏–π authStore –¥–ª—è –¥–µ–±–∞–≥–∞
pb.authStore.onChange((token, model) => {
  console.log('üîÑ [PocketBase] AuthStore –∏–∑–º–µ–Ω–∏–ª—Å—è:', {
    hasToken: !!token,
    hasModel: !!model,
    isValid: pb.authStore.isValid,
    modelType: model?.collectionName || 'unknown'
  });
});

const PocketBaseContext = createContext<PocketBase | undefined>(undefined);

export const PocketBaseProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  return (
    <PocketBaseContext.Provider value={pb}>
      {children}
    </PocketBaseContext.Provider>
  );
};

export const usePocketBase = () => {
  const context = useContext(PocketBaseContext);
  if (!context) {
    throw new Error('usePocketBase must be used within a PocketBaseProvider');
  }
  return context;
};
