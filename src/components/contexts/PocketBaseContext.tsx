import React, { createContext, useContext, useEffect } from 'react';
import PocketBase from 'pocketbase';
import Constants from 'expo-constants';

// –ß–∏—Ç–∞–µ–º –±–∞–∑–æ–≤—ã–π URL –∏–∑ expo.extra (app.json)
const getServerURL = () => {
  const extra = (Constants?.expoConfig as any)?.extra || {};
  const url = extra.apiBaseUrl as string | undefined;
  return url || 'http://xn--d1aigb4b.xn--p1ai:8090';
};

const PB_URL = getServerURL();

if (__DEV__) {
  console.log('üèóÔ∏è [PocketBase] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PocketBase —Å URL:', PB_URL);
}

const pb = new PocketBase(PB_URL);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ (—Ç–æ–ª—å–∫–æ dev)
pb.beforeSend = function (url, options) {
  if (__DEV__) {
    console.log('üåê [PocketBase] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å:', {
      url: url,
      method: options.method || 'GET',
    });
  }

  return { url, options };
};

pb.afterSend = function (response, data) {
  if (__DEV__) {
    console.log('üì° [PocketBase] –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω:', {
      status: response.status,
      ok: response.ok,
      url: response.url,
    });
  }

  return data;
};

// –õ–æ–≥–∏ authStore —Ç–æ–ª—å–∫–æ –≤ dev
if (__DEV__) {
  pb.authStore.onChange((token, model) => {
    console.log('üîÑ [PocketBase] AuthStore –∏–∑–º–µ–Ω–∏–ª—Å—è:', {
      hasToken: !!token,
      hasModel: !!model,
      isValid: pb.authStore.isValid,
      modelType: model?.collectionName || 'unknown',
    });
  });
}

const PocketBaseContext = createContext<PocketBase | undefined>(undefined);

export const PocketBaseProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    const checkServerHealth = async () => {
      try {
        if (__DEV__) {
          console.log('üîç [PocketBase] –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞...');
        }

        const controller = new AbortController();
        const timer = setTimeout(() => controller.abort(), 5000);

        const response = await fetch(PB_URL + '/api/health', {
          method: 'GET',
          signal: controller.signal,
        });

        clearTimeout(timer);

        if (__DEV__) {
          console.log(response.ok ? '‚úÖ [PocketBase] –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω' : `‚ö†Ô∏è [PocketBase] –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç —Å –æ—à–∏–±–∫–æ–π: ${response.status}`);
        }
      } catch (error) {
        if (__DEV__) {
          console.error('‚ùå [PocketBase] –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error);
          console.error('üîß [PocketBase] –ü—Ä–æ–≤–µ—Ä—å—Ç–µ URL —Å–µ—Ä–≤–µ—Ä–∞:', PB_URL);
        }
      }
    };

    checkServerHealth();
  }, []);

  return (
    <PocketBaseContext.Provider value={pb}>
      {children}
    </PocketBaseContext.Provider>
  );
};

export const usePocketBase = () => {
  const context = useContext(PocketBaseContext);
  if (!context) {
    throw new Error('usePocketBase must be used within a PocketBaseProvider');
  }
  return context;
};
